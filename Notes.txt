Dev Requirements:

Install node.js:
Ubuntu: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions


Install jsdocs globally:
sudo npm install -g jsdoc



To Generate Docs:
In root directory:
Delete the docs directory.
Run:
    jsdoc public_html/js/leeboard -r -d docs

Last know version of jsdoc being used 3.5.5

To use jsdoc config file:
    jsdoc public_html/js/leeboard -r -d docs -c ./jsdoc-config.json



Docs notes:
Singleton: See LBDebug.DataLog in core/Debug.js

For inline code:
<pre><code>
    function abc() {
    }
</code></pre>


Exporting Blender to JSON model:
Blender plug-in is in three.js/utils/exports/blender
When exporting, make sure in Apply Modifiers Type is set to Geometry, and then Faces and Face Materials
are both checked.



TODO:

Course:
Start Line
    - Port then stbd marks

Mark List:
    - Round to port
    - Round to stbd
    - Gate (port then stbd marks)

Finish line
    - Port then stbd marks

Need to detect:
    - Crossing of starting line.
    - Crossing of finish line
    - Contact with mark - 30 sec. penalty or do a turn?
    Detecting contact:
        Use Cannon.World.collisionMatrix.get(bodyA, bodyB)
        Can have simple list of marks to check against. Primarily list of upcoming marks.
        Once there is contact, record the penalty, and disable detection against that mark.
    Determining passing of mark:
        Round to port, round to stbd? Which side of velocity vector boat goes around the mark?



Multi-player


Sailing Boundaries:
Need to tweak what happens beyond the boundaries. Right now the counteracting wind is added to the existing
wind, which may cause the overall wind to drop to near zero just beyond the boundaries.

Lateral hull resistance > longitudinal hull resistance - an angle vs. scale curve, 1 when angle is 0.

Hull windage - just a Cl/Cd curve.

Add wind shadowing behind sails.

Add transition region when limiting force due to z limits.


Add timer:
Current time
Elapsed time
Lap times


Add Map View
Need objects to be mapped. Include myBoat's course.
    - Boundaries
    - Buoys
    - Goals, and which is the current goal, completed goals, future goals
    - Sprites for everything.
    - Own boat
    - Other boats, objects, etc.


Add scenery.

Add time courses: 
    Windward-Leeward-Finish
    Triangle
    Olympic

Add Crew Over Board

Add jib.


Add ability to reset boat to start? Or right capsized boat after 10 seconds?

Shut off wakes if FPS too low.

Look into adjusting physics time step based on actual FPS.


Get rid of the overloads of Vector2, Vector3 in Geometry-THREE.js?


Camera Controllers:


Work on the timing in App3D._cycle().
Only disable simulation when paused, keep camera controller updating operational so can change the view.


Wake: In Hull, maybe change the determining of the wakeEndPort, wakeEndStbd to look for
the points farthest from the center that are aft of the velocity perpendicular.




Add drop-down button for toggling force arrows.

Redo LED bar indicator into separate class, that has good, marginal, and bad ranges.


Buttons to add:
HUD display buttons (Boat, Wind, Forces)
Toggle Velocity Arrows
Toggle Force Arrows


Add ability to release rudder (space + CTRL? dbl-click rudder control?)

Add 3D force arrows.

Need to track shifting child rigid bodies, but only when they change.
Maybe we don't really care about the boom and rudder?
- Vessel:
    - MainMast
    - MainBoom
        Change would typically be rotation of boom
    - Rudder
        Change would typically be rotation of rudder.
        Do we need to track this?

The way the Cannon body stuff currently works is that we take the volumes
of a rigid body and then:
    - Clone the vertices.
    - Generate a CANNON.ConvexPolyhedron() for each volume
    - Update the body center of mass from all the shapes (this is dependent on the individual volumes)

So, want to be able to update the vertices of the shape associated with a given volume,
but only if the volume has moved or changed shape.
More than anything, don't want to have to create new shapes.



Draggable controls:



Add sun position calculator, based on a given time of day and location.


Much Later:
Boat designer:
Lets you change different parameters of the boat.



// From Phaser.js
!function(e){
    if("object"==typeof exports)
        module.exports=e();
    else if("function"==typeof define&&false)
        define(e);
    else {
        var f;
        "undefined"!=typeof window 
            ? f=window
            : "undefined"!=typeof global
                ? f=global
                : "undefined"!=typeof self&&(f=self),f.p2=e()
    }
}(function(){
    var define,module,exports;
    return (function e(t,n,r){
        function s(o,u){
            if(!n[o]){
                if(!t[o]){
                    var a=typeof require=="function"&&require;
                    if(!u&&a)
                        return a(o,!0);
                    if(i)
                        return i(o,!0);
                    throw new Error("Cannot find module '"+o+"'")
                }
                var f=n[o]={exports:{}};
                t[o][0].call(f.exports,
                    function(e){
                        var n=t[o][1][e];
                        return s(n?n:e)
                    },f,f.exports,e,t,n,r)
            }
            return n[o].exports
        }
        var i=typeof require=="function"&&require;
        for(var o=0;o<r.length;o++)
            s(r[o]);
        return s
    })
({1:[function(_dereq_,module,exports)
{
...
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = Phaser;
        }
        exports.Phaser = Phaser;
    } else if (typeof define !== 'undefined' && define.amd) {
        define('Phaser', (function() { return root.Phaser = Phaser; })() );
    } else {
        root.Phaser = Phaser;
    }

    return Phaser;
}).call(this);




// THREE.js
(
    function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' 
            ? factory(exports) 
            : typeof define === 'function' && define.amd 
                ? define(['exports'], factory) 
                : (factory(
                    (global.THREE = global.THREE || {})
                ));
    }
    (this, 
        (
            function (exports) { 
                'use strict';

...

                exports.Projector = Projector;
                exports.CanvasRenderer = CanvasRenderer;

                Object.defineProperty(exports, '__esModule', { value: true });

            }
        )
    )
);


Approach for mapping sail surface to sail model::
Search the model vertex list for the vertices closest to the points on the sail surface's
mesh, and match those up.

update the model.geometry.vertices, set model.geometry.verticesNeedUpdate to true when done.


mesh, and match those up.
21 vertices
    "vertices":[
0,-1.91069e-15,-4.37114e-08,
3.15,-1.91069e-15,-4.37114e-08,

0,7.48,-2.8325e-07,             x
0,6.0588,-2.50268e-07,

0,1.87,-9.63108e-08,
3,1.87,-9.63108e-08,

1.47,6.0588,-2.50268e-07,

0,4.0392,-1.76559e-07,
2.48,4.0392,-1.76559e-07,

0.7875,-1.91069e-15,-4.37114e-08,
1.575,-1.91069e-15,-4.37114e-08,
2.3625,-1.91069e-15,-4.37114e-08,

2.25,1.87,-9.63108e-08,
1.5,1.87,-9.63108e-08,
0.75,1.87,-9.63108e-08,

1.1025,6.0588,-2.50268e-07,
0.735,6.0588,-2.50268e-07,      x
0.3675,6.0588,-2.50268e-07,

1.86,4.0392,-1.76559e-07,
1.24,4.0392,-1.76559e-07,
0.62,4.0392,-1.76559e-07],
